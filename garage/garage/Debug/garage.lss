
garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a98  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000a98  00000b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016da  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  00002402  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d49  00000000  00000000  00002d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00003a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058e  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000da5  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004fd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  7a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	82 e4       	ldi	r24, 0x42	; 66
  88:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	83 ef       	ldi	r24, 0xF3	; 243
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <send_falling_edge+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <send_falling_edge+0x14>
  96:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
  a2:	83 ef       	ldi	r24, 0xF3	; 243
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <send_falling_edge+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <send_falling_edge+0x2a>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(uint8 cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
  b0:	68 2f       	mov	r22, r24
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
	DIO_write('B',RS,0);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
	send_falling_edge();
  c2:	0e 94 41 00 	call	0x82	; 0x82 <send_falling_edge>
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_vSend_cmd+0x1a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_vSend_cmd+0x20>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <LCD_vInit>:
  d4:	8f e4       	ldi	r24, 0x4F	; 79
  d6:	93 ec       	ldi	r25, 0xC3	; 195
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_vInit+0x4>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_vInit+0xa>
  de:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	67 e0       	ldi	r22, 0x07	; 7
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	82 e4       	ldi	r24, 0x42	; 66
 154:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_vInit+0x8e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_vInit+0x94>
 168:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_vInit+0xa0>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_vInit+0xa6>
 17a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 182:	83 ec       	ldi	r24, 0xC3	; 195
 184:	99 e0       	ldi	r25, 0x09	; 9
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_vInit+0xb2>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_vInit+0xb8>
 18c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_vInit+0xc4>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_vInit+0xca>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <LCD_vSend_char>:
}

void LCD_vSend_char(uint8 data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 1a2:	68 2f       	mov	r22, r24
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 14 03 	call	0x628	; 0x628 <DIO_write_port>
	DIO_write('B',RS,1);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
	send_falling_edge();
 1b4:	0e 94 41 00 	call	0x82	; 0x82 <send_falling_edge>
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_vSend_char+0x1a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_vSend_char+0x20>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <LCD_vSend_string>:
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 1ce:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_vSend_char>
		data++;
 1d2:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 1d4:	88 81       	ld	r24, Y
 1d6:	81 11       	cpse	r24, r1
 1d8:	fa cf       	rjmp	.-12     	; 0x1ce <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 1e6:	83 ec       	ldi	r24, 0xC3	; 195
 1e8:	99 e0       	ldi	r25, 0x09	; 9
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_clearscreen+0xa>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_clearscreen+0x10>
 1f0:	00 00       	nop
 1f2:	08 95       	ret

000001f4 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(uint8 row,uint8 coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
 1f6:	98 0f       	add	r25, r24
 1f8:	92 30       	cpi	r25, 0x02	; 2
 1fa:	70 f4       	brcc	.+28     	; 0x218 <LCD_movecursor+0x24>
 1fc:	61 31       	cpi	r22, 0x11	; 17
 1fe:	70 f4       	brcc	.+28     	; 0x21c <LCD_movecursor+0x28>
 200:	66 23       	and	r22, r22
 202:	71 f0       	breq	.+28     	; 0x220 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	19 f4       	brne	.+6      	; 0x20e <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 208:	2f e7       	ldi	r18, 0x7F	; 127
 20a:	26 0f       	add	r18, r22
 20c:	0a c0       	rjmp	.+20     	; 0x222 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	41 f4       	brne	.+16     	; 0x222 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 212:	2f eb       	ldi	r18, 0xBF	; 191
 214:	26 0f       	add	r18, r22
 216:	05 c0       	rjmp	.+10     	; 0x222 <LCD_movecursor+0x2e>
void LCD_movecursor(uint8 row,uint8 coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 218:	20 e8       	ldi	r18, 0x80	; 128
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_movecursor+0x2e>
 21c:	20 e8       	ldi	r18, 0x80	; 128
 21e:	01 c0       	rjmp	.+2      	; 0x222 <LCD_movecursor+0x2e>
 220:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 222:	82 2f       	mov	r24, r18
 224:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_vSend_cmd>
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_movecursor+0x38>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_movecursor+0x3e>
 232:	00 00       	nop
 234:	08 95       	ret

00000236 <LED_vInit>:
 */ 

#include "../../MCAL/DIO/DIO.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_vsetPINDir>
 23c:	08 95       	ret

0000023e <LED_vTurnOn>:
}
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
 244:	08 95       	ret

00000246 <LED_vTurnOff>:
}
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_write>
 24c:	08 95       	ret

0000024e <main>:



int main(void)
{
	LED_vInit(PORT_C,1);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	83 e4       	ldi	r24, 0x43	; 67
 252:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vInit>
	LED_vInit(PORT_C,2);
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	83 e4       	ldi	r24, 0x43	; 67
 25a:	0e 94 1b 01 	call	0x236	; 0x236 <LED_vInit>
	LED_vTurnOn(PORT_C,1);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	83 e4       	ldi	r24, 0x43	; 67
 262:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vTurnOn>
	LCD_vInit();
 266:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_vInit>
	LCD_vSend_string("there are 0 cars");
 26a:	80 e6       	ldi	r24, 0x60	; 96
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
	LCD_movecursor(2,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_movecursor>
	LCD_vSend_string("garage is empty");
 27a:	81 e7       	ldi	r24, 0x71	; 113
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
	uint8 flag1=0,flag2=0,IR1,IR2,counter=0;
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	01 c0       	rjmp	.+2      	; 0x28c <main+0x3e>
			_delay_ms(1000);
			timer1_wave_fastPWM_A(0);
		}
		else if(IR2==0)
		{
			flag2=0;
 28a:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_movecursor(2,1);
	LCD_vSend_string("garage is empty");
	uint8 flag1=0,flag2=0,IR1,IR2,counter=0;
	while(1)
	{
		IR1=DIO_u8read(PORT_D,0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	84 e4       	ldi	r24, 0x44	; 68
 290:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_u8read>
		if(IR1==1 && flag1==0 && counter<3)
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	e1 f5       	brne	.+120    	; 0x310 <main+0xc2>
 298:	c1 11       	cpse	r28, r1
 29a:	3a c0       	rjmp	.+116    	; 0x310 <main+0xc2>
 29c:	13 30       	cpi	r17, 0x03	; 3
 29e:	c0 f5       	brcc	.+112    	; 0x310 <main+0xc2>
		{
			counter++;
 2a0:	c1 e0       	ldi	r28, 0x01	; 1
 2a2:	c1 0f       	add	r28, r17
			LCD_movecursor(1,11);
 2a4:	6b e0       	ldi	r22, 0x0B	; 11
 2a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_movecursor>
			LCD_vSend_char(counter+48);
 2aa:	81 e3       	ldi	r24, 0x31	; 49
 2ac:	81 0f       	add	r24, r17
 2ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_vSend_char>
			flag1=1;
			if(counter==3)
 2b2:	c3 30       	cpi	r28, 0x03	; 3
 2b4:	b1 f4       	brne	.+44     	; 0x2e2 <main+0x94>
			{
				LCD_clearscreen();
 2b6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_clearscreen>
				LCD_vSend_string("there are 3 cars");
 2ba:	81 e8       	ldi	r24, 0x81	; 129
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
				LCD_movecursor(2,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_movecursor>
				LCD_vSend_string("garage is full");
 2ca:	82 e9       	ldi	r24, 0x92	; 146
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
				LED_vTurnOn(PORT_C,2);
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	83 e4       	ldi	r24, 0x43	; 67
 2d6:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vTurnOn>
				LED_vTurnOff(PORT_C,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	83 e4       	ldi	r24, 0x43	; 67
 2de:	0e 94 23 01 	call	0x246	; 0x246 <LED_vTurnOff>
			}
			timer1_wave_fastPWM_B(-90);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	84 eb       	ldi	r24, 0xB4	; 180
 2e8:	92 ec       	ldi	r25, 0xC2	; 194
 2ea:	0e 94 77 03 	call	0x6ee	; 0x6ee <timer1_wave_fastPWM_B>
 2ee:	2f e3       	ldi	r18, 0x3F	; 63
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	93 e0       	ldi	r25, 0x03	; 3
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0xa6>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0xb0>
 2fe:	00 00       	nop
			_delay_ms(1000);
			timer1_wave_fastPWM_B(0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	cb 01       	movw	r24, r22
 306:	0e 94 77 03 	call	0x6ee	; 0x6ee <timer1_wave_fastPWM_B>
	while(1)
	{
		IR1=DIO_u8read(PORT_D,0);
		if(IR1==1 && flag1==0 && counter<3)
		{
			counter++;
 30a:	1c 2f       	mov	r17, r28
			LCD_movecursor(1,11);
			LCD_vSend_char(counter+48);
			flag1=1;
 30c:	c1 e0       	ldi	r28, 0x01	; 1
				LED_vTurnOn(PORT_C,2);
				LED_vTurnOff(PORT_C,1);
			}
			timer1_wave_fastPWM_B(-90);
			_delay_ms(1000);
			timer1_wave_fastPWM_B(0);
 30e:	03 c0       	rjmp	.+6      	; 0x316 <main+0xc8>
		}
		else if(IR1==0)
 310:	81 11       	cpse	r24, r1
 312:	01 c0       	rjmp	.+2      	; 0x316 <main+0xc8>
		{
			flag1=0;
 314:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		IR2=DIO_u8read(PORT_D,1);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	84 e4       	ldi	r24, 0x44	; 68
 31a:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_u8read>
		if(IR2==1 && flag2==0 && counter>0)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	09 f0       	breq	.+2      	; 0x324 <main+0xd6>
 322:	41 c0       	rjmp	.+130    	; 0x3a6 <main+0x158>
 324:	d1 11       	cpse	r29, r1
 326:	3f c0       	rjmp	.+126    	; 0x3a6 <main+0x158>
 328:	11 23       	and	r17, r17
 32a:	e9 f1       	breq	.+122    	; 0x3a6 <main+0x158>
		{
			counter--;
 32c:	df ef       	ldi	r29, 0xFF	; 255
 32e:	d1 0f       	add	r29, r17
			LCD_movecursor(1,10);
 330:	6a e0       	ldi	r22, 0x0A	; 10
 332:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_movecursor>
			LCD_vSend_char(counter+48);
 336:	11 5d       	subi	r17, 0xD1	; 209
 338:	81 2f       	mov	r24, r17
 33a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_vSend_char>
			flag2=1;
			
			LCD_clearscreen();
 33e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_clearscreen>
			LCD_vSend_string("there are ");
 342:	81 ea       	ldi	r24, 0xA1	; 161
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
			LCD_vSend_char(counter+48);
 34a:	81 2f       	mov	r24, r17
 34c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_vSend_char>
			LCD_vSend_string(" cars");
 350:	8b e6       	ldi	r24, 0x6B	; 107
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
			LCD_movecursor(2,1);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_movecursor>
			LCD_vSend_string("garage has space");
 360:	8c ea       	ldi	r24, 0xAC	; 172
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_vSend_string>
			LED_vTurnOff(PORT_C,2);
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	83 e4       	ldi	r24, 0x43	; 67
 36c:	0e 94 23 01 	call	0x246	; 0x246 <LED_vTurnOff>
			LED_vTurnOn(PORT_C,1);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	83 e4       	ldi	r24, 0x43	; 67
 374:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_vTurnOn>
			timer1_wave_fastPWM_A(-90);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	84 eb       	ldi	r24, 0xB4	; 180
 37e:	92 ec       	ldi	r25, 0xC2	; 194
 380:	0e 94 27 03 	call	0x64e	; 0x64e <timer1_wave_fastPWM_A>
 384:	2f e3       	ldi	r18, 0x3F	; 63
 386:	8d e0       	ldi	r24, 0x0D	; 13
 388:	93 e0       	ldi	r25, 0x03	; 3
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x13c>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0x146>
 394:	00 00       	nop
			_delay_ms(1000);
			timer1_wave_fastPWM_A(0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	cb 01       	movw	r24, r22
 39c:	0e 94 27 03 	call	0x64e	; 0x64e <timer1_wave_fastPWM_A>
		}
		
		IR2=DIO_u8read(PORT_D,1);
		if(IR2==1 && flag2==0 && counter>0)
		{
			counter--;
 3a0:	1d 2f       	mov	r17, r29
			LCD_movecursor(1,10);
			LCD_vSend_char(counter+48);
			flag2=1;
 3a2:	d1 e0       	ldi	r29, 0x01	; 1
			LCD_vSend_string("garage has space");
			LED_vTurnOff(PORT_C,2);
			LED_vTurnOn(PORT_C,1);
			timer1_wave_fastPWM_A(-90);
			_delay_ms(1000);
			timer1_wave_fastPWM_A(0);
 3a4:	73 cf       	rjmp	.-282    	; 0x28c <main+0x3e>
		}
		else if(IR2==0)
 3a6:	88 23       	and	r24, r24
 3a8:	09 f4       	brne	.+2      	; 0x3ac <main+0x15e>
 3aa:	6f cf       	rjmp	.-290    	; 0x28a <main+0x3c>
 3ac:	6f cf       	rjmp	.-290    	; 0x28c <main+0x3e>

000003ae <DIO_vsetPINDir>:
		break ;
		case PORT_C :
		DDRC=direction; //set the direction of port C
		break ;
		case PORT_D:
		DDRD=direction; //set the direction of port D
 3ae:	82 34       	cpi	r24, 0x42	; 66
 3b0:	19 f1       	breq	.+70     	; 0x3f8 <DIO_vsetPINDir+0x4a>
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <DIO_vsetPINDir+0xc>
 3b4:	81 34       	cpi	r24, 0x41	; 65
 3b6:	39 f0       	breq	.+14     	; 0x3c6 <DIO_vsetPINDir+0x18>
 3b8:	08 95       	ret
 3ba:	83 34       	cpi	r24, 0x43	; 67
 3bc:	b1 f1       	breq	.+108    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3be:	84 34       	cpi	r24, 0x44	; 68
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_vsetPINDir+0x16>
 3c2:	4c c0       	rjmp	.+152    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3c4:	08 95       	ret
 3c6:	41 30       	cpi	r20, 0x01	; 1
 3c8:	59 f4       	brne	.+22     	; 0x3e0 <DIO_vsetPINDir+0x32>
 3ca:	2a b3       	in	r18, 0x1a	; 26
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_vsetPINDir+0x28>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_vsetPINDir+0x24>
 3da:	82 2b       	or	r24, r18
 3dc:	8a bb       	out	0x1a, r24	; 26
 3de:	08 95       	ret
 3e0:	2a b3       	in	r18, 0x1a	; 26
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_vsetPINDir+0x3e>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_vsetPINDir+0x3a>
 3f0:	80 95       	com	r24
 3f2:	82 23       	and	r24, r18
 3f4:	8a bb       	out	0x1a, r24	; 26
 3f6:	08 95       	ret
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	59 f4       	brne	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fc:	27 b3       	in	r18, 0x17	; 23
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	87 bb       	out	0x17, r24	; 23
 410:	08 95       	ret
 412:	27 b3       	in	r18, 0x17	; 23
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	80 95       	com	r24
 424:	82 23       	and	r24, r18
 426:	87 bb       	out	0x17, r24	; 23
 428:	08 95       	ret
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	59 f4       	brne	.+22     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42e:	24 b3       	in	r18, 0x14	; 20
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	82 2b       	or	r24, r18
 440:	84 bb       	out	0x14, r24	; 20
 442:	08 95       	ret
 444:	24 b3       	in	r18, 0x14	; 20
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	84 bb       	out	0x14, r24	; 20
 45a:	08 95       	ret
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	59 f4       	brne	.+22     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 460:	21 b3       	in	r18, 0x11	; 17
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	82 2b       	or	r24, r18
 472:	81 bb       	out	0x11, r24	; 17
 474:	08 95       	ret
 476:	21 b3       	in	r18, 0x11	; 17
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	81 bb       	out	0x11, r24	; 17
 48c:	08 95       	ret

0000048e <DIO_write>:
 48e:	82 34       	cpi	r24, 0x42	; 66
 490:	19 f1       	breq	.+70     	; 0x4d8 <DIO_write+0x4a>
 492:	18 f4       	brcc	.+6      	; 0x49a <DIO_write+0xc>
 494:	81 34       	cpi	r24, 0x41	; 65
 496:	39 f0       	breq	.+14     	; 0x4a6 <DIO_write+0x18>
 498:	08 95       	ret
 49a:	83 34       	cpi	r24, 0x43	; 67
 49c:	b1 f1       	breq	.+108    	; 0x50a <DIO_write+0x7c>
 49e:	84 34       	cpi	r24, 0x44	; 68
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <DIO_write+0x16>
 4a2:	4c c0       	rjmp	.+152    	; 0x53c <DIO_write+0xae>
 4a4:	08 95       	ret
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <DIO_write+0x32>
 4aa:	2b b3       	in	r18, 0x1b	; 27
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_write+0x28>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_write+0x24>
 4ba:	82 2b       	or	r24, r18
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret
 4c0:	2b b3       	in	r18, 0x1b	; 27
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_write+0x3e>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_write+0x3a>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	8b bb       	out	0x1b, r24	; 27
 4d6:	08 95       	ret
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	59 f4       	brne	.+22     	; 0x4f2 <DIO_write+0x64>
 4dc:	28 b3       	in	r18, 0x18	; 24
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_write+0x5a>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_write+0x56>
 4ec:	82 2b       	or	r24, r18
 4ee:	88 bb       	out	0x18, r24	; 24
 4f0:	08 95       	ret
 4f2:	28 b3       	in	r18, 0x18	; 24
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_write+0x70>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_write+0x6c>
 502:	80 95       	com	r24
 504:	82 23       	and	r24, r18
 506:	88 bb       	out	0x18, r24	; 24
 508:	08 95       	ret
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	59 f4       	brne	.+22     	; 0x524 <DIO_write+0x96>
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0x8c>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0x88>
 51e:	82 2b       	or	r24, r18
 520:	85 bb       	out	0x15, r24	; 21
 522:	08 95       	ret
 524:	25 b3       	in	r18, 0x15	; 21
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_write+0xa2>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_write+0x9e>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	85 bb       	out	0x15, r24	; 21
 53a:	08 95       	ret
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	59 f4       	brne	.+22     	; 0x556 <DIO_write+0xc8>
 540:	22 b3       	in	r18, 0x12	; 18
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0xbe>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0xba>
 550:	82 2b       	or	r24, r18
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret
 556:	22 b3       	in	r18, 0x12	; 18
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_write+0xd4>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_write+0xd0>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	08 95       	ret

0000056e <DIO_u8read>:
 56e:	82 34       	cpi	r24, 0x42	; 66
 570:	e9 f0       	breq	.+58     	; 0x5ac <DIO_u8read+0x3e>
 572:	18 f4       	brcc	.+6      	; 0x57a <DIO_u8read+0xc>
 574:	81 34       	cpi	r24, 0x41	; 65
 576:	31 f0       	breq	.+12     	; 0x584 <DIO_u8read+0x16>
 578:	55 c0       	rjmp	.+170    	; 0x624 <DIO_u8read+0xb6>
 57a:	83 34       	cpi	r24, 0x43	; 67
 57c:	59 f1       	breq	.+86     	; 0x5d4 <DIO_u8read+0x66>
 57e:	84 34       	cpi	r24, 0x44	; 68
 580:	e9 f1       	breq	.+122    	; 0x5fc <DIO_u8read+0x8e>
 582:	50 c0       	rjmp	.+160    	; 0x624 <DIO_u8read+0xb6>
 584:	49 b3       	in	r20, 0x19	; 25
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	9c 01       	movw	r18, r24
 58c:	06 2e       	mov	r0, r22
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8read+0x26>
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8read+0x22>
 598:	84 2f       	mov	r24, r20
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	82 23       	and	r24, r18
 59e:	93 23       	and	r25, r19
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_u8read+0x38>
 5a2:	95 95       	asr	r25
 5a4:	87 95       	ror	r24
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_u8read+0x34>
 5aa:	08 95       	ret
 5ac:	46 b3       	in	r20, 0x16	; 22
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	9c 01       	movw	r18, r24
 5b4:	06 2e       	mov	r0, r22
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_u8read+0x4e>
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_u8read+0x4a>
 5c0:	84 2f       	mov	r24, r20
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	82 23       	and	r24, r18
 5c6:	93 23       	and	r25, r19
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_u8read+0x60>
 5ca:	95 95       	asr	r25
 5cc:	87 95       	ror	r24
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_u8read+0x5c>
 5d2:	08 95       	ret
 5d4:	43 b3       	in	r20, 0x13	; 19
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	9c 01       	movw	r18, r24
 5dc:	06 2e       	mov	r0, r22
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_u8read+0x76>
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_u8read+0x72>
 5e8:	84 2f       	mov	r24, r20
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	82 23       	and	r24, r18
 5ee:	93 23       	and	r25, r19
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_u8read+0x88>
 5f2:	95 95       	asr	r25
 5f4:	87 95       	ror	r24
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_u8read+0x84>
 5fa:	08 95       	ret
 5fc:	40 b3       	in	r20, 0x10	; 16
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	9c 01       	movw	r18, r24
 604:	06 2e       	mov	r0, r22
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_u8read+0x9e>
 608:	22 0f       	add	r18, r18
 60a:	33 1f       	adc	r19, r19
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_u8read+0x9a>
 610:	84 2f       	mov	r24, r20
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	82 23       	and	r24, r18
 616:	93 23       	and	r25, r19
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_u8read+0xb0>
 61a:	95 95       	asr	r25
 61c:	87 95       	ror	r24
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_u8read+0xac>
 622:	08 95       	ret
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret

00000628 <DIO_write_port>:
	}
	
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 628:	82 34       	cpi	r24, 0x42	; 66
 62a:	59 f0       	breq	.+22     	; 0x642 <DIO_write_port+0x1a>
 62c:	18 f4       	brcc	.+6      	; 0x634 <DIO_write_port+0xc>
 62e:	81 34       	cpi	r24, 0x41	; 65
 630:	31 f0       	breq	.+12     	; 0x63e <DIO_write_port+0x16>
 632:	08 95       	ret
 634:	83 34       	cpi	r24, 0x43	; 67
 636:	39 f0       	breq	.+14     	; 0x646 <DIO_write_port+0x1e>
 638:	84 34       	cpi	r24, 0x44	; 68
 63a:	39 f0       	breq	.+14     	; 0x64a <DIO_write_port+0x22>
 63c:	08 95       	ret
	{
		case PORT_A :
		PORTA=portvalue; //Write the given value to the port A
 63e:	6b bb       	out	0x1b, r22	; 27
		break ;
 640:	08 95       	ret
		case PORT_B:
		PORTB=portvalue; //Write the given value to the port B
 642:	68 bb       	out	0x18, r22	; 24
		break ;
 644:	08 95       	ret
		case PORT_C:
		PORTC=portvalue; //Write the given value to the port C
 646:	65 bb       	out	0x15, r22	; 21
		break ;
 648:	08 95       	ret
		case PORT_D:
		PORTD=portvalue; //Write the given value to the port D
 64a:	62 bb       	out	0x12, r22	; 18
 64c:	08 95       	ret

0000064e <timer1_wave_fastPWM_A>:
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
}

void timer1_wave_fastPWM_A(double degree)
{
 64e:	cf 92       	push	r12
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	6b 01       	movw	r12, r22
 658:	7c 01       	movw	r14, r24
	double value;
	if (degree>=90)
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	44 eb       	ldi	r20, 0xB4	; 180
 660:	52 e4       	ldi	r21, 0x42	; 66
 662:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 666:	88 23       	and	r24, r24
 668:	7c f0       	brlt	.+30     	; 0x688 <timer1_wave_fastPWM_A+0x3a>
	{
		value=(((0.5/90)*degree)+1.5);
 66a:	21 e6       	ldi	r18, 0x61	; 97
 66c:	3b e0       	ldi	r19, 0x0B	; 11
 66e:	46 eb       	ldi	r20, 0xB6	; 182
 670:	5b e3       	ldi	r21, 0x3B	; 59
 672:	c7 01       	movw	r24, r14
 674:	b6 01       	movw	r22, r12
 676:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 ec       	ldi	r20, 0xC0	; 192
 680:	5f e3       	ldi	r21, 0x3F	; 63
 682:	0e 94 c8 03 	call	0x790	; 0x790 <__addsf3>
 686:	0e c0       	rjmp	.+28     	; 0x6a4 <timer1_wave_fastPWM_A+0x56>
	}
	else
	{
		value=(1.5-((-0.5/90)*degree));
 688:	21 e6       	ldi	r18, 0x61	; 97
 68a:	3b e0       	ldi	r19, 0x0B	; 11
 68c:	46 eb       	ldi	r20, 0xB6	; 182
 68e:	5b e3       	ldi	r21, 0x3B	; 59
 690:	c7 01       	movw	r24, r14
 692:	b6 01       	movw	r22, r12
 694:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	40 ec       	ldi	r20, 0xC0	; 192
 69e:	5f e3       	ldi	r21, 0x3F	; 63
 6a0:	0e 94 c8 03 	call	0x790	; 0x790 <__addsf3>
	}
	
	
	
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 6a4:	21 b3       	in	r18, 0x11	; 17
 6a6:	20 62       	ori	r18, 0x20	; 32
 6a8:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 6aa:	2f b5       	in	r18, 0x2f	; 47
 6ac:	22 60       	ori	r18, 0x02	; 2
 6ae:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 6b0:	2e b5       	in	r18, 0x2e	; 46
 6b2:	28 60       	ori	r18, 0x08	; 8
 6b4:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 6b6:	2e b5       	in	r18, 0x2e	; 46
 6b8:	20 61       	ori	r18, 0x10	; 16
 6ba:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 6bc:	20 e0       	ldi	r18, 0x00	; 0
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	4a e7       	ldi	r20, 0x7A	; 122
 6c2:	54 e4       	ldi	r21, 0x44	; 68
 6c4:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 6c8:	0e 94 34 04 	call	0x868	; 0x868 <__fixunssfsi>
 6cc:	7b bd       	out	0x2b, r23	; 43
 6ce:	6a bd       	out	0x2a, r22	; 42
	ICR1=19999;
 6d0:	8f e1       	ldi	r24, 0x1F	; 31
 6d2:	9e e4       	ldi	r25, 0x4E	; 78
 6d4:	97 bd       	out	0x27, r25	; 39
 6d6:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 6d8:	8e b5       	in	r24, 0x2e	; 46
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 6de:	8f b5       	in	r24, 0x2f	; 47
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	8f bd       	out	0x2f, r24	; 47
}
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	08 95       	ret

000006ee <timer1_wave_fastPWM_B>:

void timer1_wave_fastPWM_B(double degree)
{
 6ee:	cf 92       	push	r12
 6f0:	df 92       	push	r13
 6f2:	ef 92       	push	r14
 6f4:	ff 92       	push	r15
 6f6:	6b 01       	movw	r12, r22
 6f8:	7c 01       	movw	r14, r24
	double value;
	if (degree>=90)
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	44 eb       	ldi	r20, 0xB4	; 180
 700:	52 e4       	ldi	r21, 0x42	; 66
 702:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 706:	88 23       	and	r24, r24
 708:	7c f0       	brlt	.+30     	; 0x728 <timer1_wave_fastPWM_B+0x3a>
	{
		value=(((0.5/90)*degree)+1.5);
 70a:	21 e6       	ldi	r18, 0x61	; 97
 70c:	3b e0       	ldi	r19, 0x0B	; 11
 70e:	46 eb       	ldi	r20, 0xB6	; 182
 710:	5b e3       	ldi	r21, 0x3B	; 59
 712:	c7 01       	movw	r24, r14
 714:	b6 01       	movw	r22, r12
 716:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	40 ec       	ldi	r20, 0xC0	; 192
 720:	5f e3       	ldi	r21, 0x3F	; 63
 722:	0e 94 c8 03 	call	0x790	; 0x790 <__addsf3>
 726:	0e c0       	rjmp	.+28     	; 0x744 <timer1_wave_fastPWM_B+0x56>
	}
	else
	{
		value=(1.5-((-0.5/90)*degree));
 728:	21 e6       	ldi	r18, 0x61	; 97
 72a:	3b e0       	ldi	r19, 0x0B	; 11
 72c:	46 eb       	ldi	r20, 0xB6	; 182
 72e:	5b e3       	ldi	r21, 0x3B	; 59
 730:	c7 01       	movw	r24, r14
 732:	b6 01       	movw	r22, r12
 734:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	40 ec       	ldi	r20, 0xC0	; 192
 73e:	5f e3       	ldi	r21, 0x3F	; 63
 740:	0e 94 c8 03 	call	0x790	; 0x790 <__addsf3>
	}
	
	
	
	/* set OC1B as output pin */
	SET_BIT(DDRD,4);
 744:	21 b3       	in	r18, 0x11	; 17
 746:	20 61       	ori	r18, 0x10	; 16
 748:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 74a:	2f b5       	in	r18, 0x2f	; 47
 74c:	22 60       	ori	r18, 0x02	; 2
 74e:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 750:	2e b5       	in	r18, 0x2e	; 46
 752:	28 60       	ori	r18, 0x08	; 8
 754:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 756:	2e b5       	in	r18, 0x2e	; 46
 758:	20 61       	ori	r18, 0x10	; 16
 75a:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1B=value*1000;
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	4a e7       	ldi	r20, 0x7A	; 122
 762:	54 e4       	ldi	r21, 0x44	; 68
 764:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 768:	0e 94 34 04 	call	0x868	; 0x868 <__fixunssfsi>
 76c:	79 bd       	out	0x29, r23	; 41
 76e:	68 bd       	out	0x28, r22	; 40
	ICR1=19999;
 770:	8f e1       	ldi	r24, 0x1F	; 31
 772:	9e e4       	ldi	r25, 0x4E	; 78
 774:	97 bd       	out	0x27, r25	; 39
 776:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 778:	8e b5       	in	r24, 0x2e	; 46
 77a:	81 60       	ori	r24, 0x01	; 1
 77c:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1B on compare match, set OC1B at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1B1);
 77e:	8f b5       	in	r24, 0x2f	; 47
 780:	80 62       	ori	r24, 0x20	; 32
 782:	8f bd       	out	0x2f, r24	; 47
	
}
 784:	ff 90       	pop	r15
 786:	ef 90       	pop	r14
 788:	df 90       	pop	r13
 78a:	cf 90       	pop	r12
 78c:	08 95       	ret

0000078e <__subsf3>:
 78e:	50 58       	subi	r21, 0x80	; 128

00000790 <__addsf3>:
 790:	bb 27       	eor	r27, r27
 792:	aa 27       	eor	r26, r26
 794:	0e 94 df 03 	call	0x7be	; 0x7be <__addsf3x>
 798:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 79c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 7a0:	38 f0       	brcs	.+14     	; 0x7b0 <__addsf3+0x20>
 7a2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__addsf3+0x20>
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <__addsf3+0x28>
 7aa:	9f 3f       	cpi	r25, 0xFF	; 255
 7ac:	19 f4       	brne	.+6      	; 0x7b4 <__addsf3+0x24>
 7ae:	26 f4       	brtc	.+8      	; 0x7b8 <__addsf3+0x28>
 7b0:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>
 7b4:	0e f4       	brtc	.+2      	; 0x7b8 <__addsf3+0x28>
 7b6:	e0 95       	com	r30
 7b8:	e7 fb       	bst	r30, 7
 7ba:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>

000007be <__addsf3x>:
 7be:	e9 2f       	mov	r30, r25
 7c0:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 7c4:	58 f3       	brcs	.-42     	; 0x79c <__addsf3+0xc>
 7c6:	ba 17       	cp	r27, r26
 7c8:	62 07       	cpc	r22, r18
 7ca:	73 07       	cpc	r23, r19
 7cc:	84 07       	cpc	r24, r20
 7ce:	95 07       	cpc	r25, r21
 7d0:	20 f0       	brcs	.+8      	; 0x7da <__addsf3x+0x1c>
 7d2:	79 f4       	brne	.+30     	; 0x7f2 <__addsf3x+0x34>
 7d4:	a6 f5       	brtc	.+104    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 7d6:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_zero>
 7da:	0e f4       	brtc	.+2      	; 0x7de <__addsf3x+0x20>
 7dc:	e0 95       	com	r30
 7de:	0b 2e       	mov	r0, r27
 7e0:	ba 2f       	mov	r27, r26
 7e2:	a0 2d       	mov	r26, r0
 7e4:	0b 01       	movw	r0, r22
 7e6:	b9 01       	movw	r22, r18
 7e8:	90 01       	movw	r18, r0
 7ea:	0c 01       	movw	r0, r24
 7ec:	ca 01       	movw	r24, r20
 7ee:	a0 01       	movw	r20, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	ff 27       	eor	r31, r31
 7f4:	59 1b       	sub	r21, r25
 7f6:	99 f0       	breq	.+38     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f8:	59 3f       	cpi	r21, 0xF9	; 249
 7fa:	50 f4       	brcc	.+20     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7fc:	50 3e       	cpi	r21, 0xE0	; 224
 7fe:	68 f1       	brcs	.+90     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 800:	1a 16       	cp	r1, r26
 802:	f0 40       	sbci	r31, 0x00	; 0
 804:	a2 2f       	mov	r26, r18
 806:	23 2f       	mov	r18, r19
 808:	34 2f       	mov	r19, r20
 80a:	44 27       	eor	r20, r20
 80c:	58 5f       	subi	r21, 0xF8	; 248
 80e:	f3 cf       	rjmp	.-26     	; 0x7f6 <__addsf3x+0x38>
 810:	46 95       	lsr	r20
 812:	37 95       	ror	r19
 814:	27 95       	ror	r18
 816:	a7 95       	ror	r26
 818:	f0 40       	sbci	r31, 0x00	; 0
 81a:	53 95       	inc	r21
 81c:	c9 f7       	brne	.-14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 81e:	7e f4       	brtc	.+30     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 820:	1f 16       	cp	r1, r31
 822:	ba 0b       	sbc	r27, r26
 824:	62 0b       	sbc	r22, r18
 826:	73 0b       	sbc	r23, r19
 828:	84 0b       	sbc	r24, r20
 82a:	ba f0       	brmi	.+46     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 82c:	91 50       	subi	r25, 0x01	; 1
 82e:	a1 f0       	breq	.+40     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 830:	ff 0f       	add	r31, r31
 832:	bb 1f       	adc	r27, r27
 834:	66 1f       	adc	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	c2 f7       	brpl	.-16     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 83c:	0e c0       	rjmp	.+28     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 83e:	ba 0f       	add	r27, r26
 840:	62 1f       	adc	r22, r18
 842:	73 1f       	adc	r23, r19
 844:	84 1f       	adc	r24, r20
 846:	48 f4       	brcc	.+18     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 848:	87 95       	ror	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b7 95       	ror	r27
 850:	f7 95       	ror	r31
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	08 f0       	brcs	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 856:	b0 cf       	rjmp	.-160    	; 0x7b8 <__addsf3+0x28>
 858:	93 95       	inc	r25
 85a:	88 0f       	add	r24, r24
 85c:	08 f0       	brcs	.+2      	; 0x860 <__stack+0x1>
 85e:	99 27       	eor	r25, r25
 860:	ee 0f       	add	r30, r30
 862:	97 95       	ror	r25
 864:	87 95       	ror	r24
 866:	08 95       	ret

00000868 <__fixunssfsi>:
 868:	0e 94 93 04 	call	0x926	; 0x926 <__fp_splitA>
 86c:	88 f0       	brcs	.+34     	; 0x890 <__fixunssfsi+0x28>
 86e:	9f 57       	subi	r25, 0x7F	; 127
 870:	98 f0       	brcs	.+38     	; 0x898 <__fixunssfsi+0x30>
 872:	b9 2f       	mov	r27, r25
 874:	99 27       	eor	r25, r25
 876:	b7 51       	subi	r27, 0x17	; 23
 878:	b0 f0       	brcs	.+44     	; 0x8a6 <__fixunssfsi+0x3e>
 87a:	e1 f0       	breq	.+56     	; 0x8b4 <__fixunssfsi+0x4c>
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	1a f0       	brmi	.+6      	; 0x88c <__fixunssfsi+0x24>
 886:	ba 95       	dec	r27
 888:	c9 f7       	brne	.-14     	; 0x87c <__fixunssfsi+0x14>
 88a:	14 c0       	rjmp	.+40     	; 0x8b4 <__fixunssfsi+0x4c>
 88c:	b1 30       	cpi	r27, 0x01	; 1
 88e:	91 f0       	breq	.+36     	; 0x8b4 <__fixunssfsi+0x4c>
 890:	0e 94 ad 04 	call	0x95a	; 0x95a <__fp_zero>
 894:	b1 e0       	ldi	r27, 0x01	; 1
 896:	08 95       	ret
 898:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_zero>
 89c:	67 2f       	mov	r22, r23
 89e:	78 2f       	mov	r23, r24
 8a0:	88 27       	eor	r24, r24
 8a2:	b8 5f       	subi	r27, 0xF8	; 248
 8a4:	39 f0       	breq	.+14     	; 0x8b4 <__fixunssfsi+0x4c>
 8a6:	b9 3f       	cpi	r27, 0xF9	; 249
 8a8:	cc f3       	brlt	.-14     	; 0x89c <__fixunssfsi+0x34>
 8aa:	86 95       	lsr	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b3 95       	inc	r27
 8b2:	d9 f7       	brne	.-10     	; 0x8aa <__fixunssfsi+0x42>
 8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__fixunssfsi+0x5c>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	08 95       	ret

000008c6 <__fp_inf>:
 8c6:	97 f9       	bld	r25, 7
 8c8:	9f 67       	ori	r25, 0x7F	; 127
 8ca:	80 e8       	ldi	r24, 0x80	; 128
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <__fp_nan>:
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	80 ec       	ldi	r24, 0xC0	; 192
 8d6:	08 95       	ret

000008d8 <__fp_pscA>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	09 06       	cpc	r0, r25
 8e4:	08 95       	ret

000008e6 <__fp_pscB>:
 8e6:	00 24       	eor	r0, r0
 8e8:	0a 94       	dec	r0
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	05 06       	cpc	r0, r21
 8f2:	08 95       	ret

000008f4 <__fp_round>:
 8f4:	09 2e       	mov	r0, r25
 8f6:	03 94       	inc	r0
 8f8:	00 0c       	add	r0, r0
 8fa:	11 f4       	brne	.+4      	; 0x900 <__fp_round+0xc>
 8fc:	88 23       	and	r24, r24
 8fe:	52 f0       	brmi	.+20     	; 0x914 <__fp_round+0x20>
 900:	bb 0f       	add	r27, r27
 902:	40 f4       	brcc	.+16     	; 0x914 <__fp_round+0x20>
 904:	bf 2b       	or	r27, r31
 906:	11 f4       	brne	.+4      	; 0x90c <__fp_round+0x18>
 908:	60 ff       	sbrs	r22, 0
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__fp_round+0x20>
 90c:	6f 5f       	subi	r22, 0xFF	; 255
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__fp_split3>:
 916:	57 fd       	sbrc	r21, 7
 918:	90 58       	subi	r25, 0x80	; 128
 91a:	44 0f       	add	r20, r20
 91c:	55 1f       	adc	r21, r21
 91e:	59 f0       	breq	.+22     	; 0x936 <__fp_splitA+0x10>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	71 f0       	breq	.+28     	; 0x940 <__fp_splitA+0x1a>
 924:	47 95       	ror	r20

00000926 <__fp_splitA>:
 926:	88 0f       	add	r24, r24
 928:	97 fb       	bst	r25, 7
 92a:	99 1f       	adc	r25, r25
 92c:	61 f0       	breq	.+24     	; 0x946 <__fp_splitA+0x20>
 92e:	9f 3f       	cpi	r25, 0xFF	; 255
 930:	79 f0       	breq	.+30     	; 0x950 <__fp_splitA+0x2a>
 932:	87 95       	ror	r24
 934:	08 95       	ret
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	55 1f       	adc	r21, r21
 93e:	f2 cf       	rjmp	.-28     	; 0x924 <__fp_split3+0xe>
 940:	46 95       	lsr	r20
 942:	f1 df       	rcall	.-30     	; 0x926 <__fp_splitA>
 944:	08 c0       	rjmp	.+16     	; 0x956 <__fp_splitA+0x30>
 946:	16 16       	cp	r1, r22
 948:	17 06       	cpc	r1, r23
 94a:	18 06       	cpc	r1, r24
 94c:	99 1f       	adc	r25, r25
 94e:	f1 cf       	rjmp	.-30     	; 0x932 <__fp_splitA+0xc>
 950:	86 95       	lsr	r24
 952:	71 05       	cpc	r23, r1
 954:	61 05       	cpc	r22, r1
 956:	08 94       	sec
 958:	08 95       	ret

0000095a <__fp_zero>:
 95a:	e8 94       	clt

0000095c <__fp_szero>:
 95c:	bb 27       	eor	r27, r27
 95e:	66 27       	eor	r22, r22
 960:	77 27       	eor	r23, r23
 962:	cb 01       	movw	r24, r22
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <__gesf2>:
 968:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_cmp>
 96c:	08 f4       	brcc	.+2      	; 0x970 <__gesf2+0x8>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	08 95       	ret

00000972 <__mulsf3>:
 972:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 976:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 97a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 97e:	38 f0       	brcs	.+14     	; 0x98e <__mulsf3+0x1c>
 980:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 984:	20 f0       	brcs	.+8      	; 0x98e <__mulsf3+0x1c>
 986:	95 23       	and	r25, r21
 988:	11 f0       	breq	.+4      	; 0x98e <__mulsf3+0x1c>
 98a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 98e:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>
 992:	11 24       	eor	r1, r1
 994:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>

00000998 <__mulsf3x>:
 998:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 99c:	70 f3       	brcs	.-36     	; 0x97a <__mulsf3+0x8>

0000099e <__mulsf3_pse>:
 99e:	95 9f       	mul	r25, r21
 9a0:	c1 f3       	breq	.-16     	; 0x992 <__mulsf3+0x20>
 9a2:	95 0f       	add	r25, r21
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	55 1f       	adc	r21, r21
 9a8:	62 9f       	mul	r22, r18
 9aa:	f0 01       	movw	r30, r0
 9ac:	72 9f       	mul	r23, r18
 9ae:	bb 27       	eor	r27, r27
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	63 9f       	mul	r22, r19
 9b6:	aa 27       	eor	r26, r26
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	aa 1f       	adc	r26, r26
 9be:	64 9f       	mul	r22, r20
 9c0:	66 27       	eor	r22, r22
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	66 1f       	adc	r22, r22
 9c8:	82 9f       	mul	r24, r18
 9ca:	22 27       	eor	r18, r18
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 9f       	mul	r23, r19
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	83 9f       	mul	r24, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	22 1f       	adc	r18, r18
 9e2:	74 9f       	mul	r23, r20
 9e4:	33 27       	eor	r19, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	23 1f       	adc	r18, r19
 9ec:	84 9f       	mul	r24, r20
 9ee:	60 0d       	add	r22, r0
 9f0:	21 1d       	adc	r18, r1
 9f2:	82 2f       	mov	r24, r18
 9f4:	76 2f       	mov	r23, r22
 9f6:	6a 2f       	mov	r22, r26
 9f8:	11 24       	eor	r1, r1
 9fa:	9f 57       	subi	r25, 0x7F	; 127
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	9a f0       	brmi	.+38     	; 0xa26 <__mulsf3_pse+0x88>
 a00:	f1 f0       	breq	.+60     	; 0xa3e <__mulsf3_pse+0xa0>
 a02:	88 23       	and	r24, r24
 a04:	4a f0       	brmi	.+18     	; 0xa18 <__mulsf3_pse+0x7a>
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	bb 1f       	adc	r27, r27
 a0c:	66 1f       	adc	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__mulsf3_pse+0x64>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	80 f0       	brcs	.+32     	; 0xa3e <__mulsf3_pse+0xa0>
 a1e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 a22:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	e4 f3       	brlt	.-8      	; 0xa22 <__mulsf3_pse+0x84>
 a2a:	98 3e       	cpi	r25, 0xE8	; 232
 a2c:	d4 f3       	brlt	.-12     	; 0xa22 <__mulsf3_pse+0x84>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f7 95       	ror	r31
 a38:	e7 95       	ror	r30
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c1 f7       	brne	.-16     	; 0xa2e <__mulsf3_pse+0x90>
 a3e:	fe 2b       	or	r31, r30
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__fp_cmp>:
 a4c:	99 0f       	add	r25, r25
 a4e:	00 08       	sbc	r0, r0
 a50:	55 0f       	add	r21, r21
 a52:	aa 0b       	sbc	r26, r26
 a54:	e0 e8       	ldi	r30, 0x80	; 128
 a56:	fe ef       	ldi	r31, 0xFE	; 254
 a58:	16 16       	cp	r1, r22
 a5a:	17 06       	cpc	r1, r23
 a5c:	e8 07       	cpc	r30, r24
 a5e:	f9 07       	cpc	r31, r25
 a60:	c0 f0       	brcs	.+48     	; 0xa92 <__fp_cmp+0x46>
 a62:	12 16       	cp	r1, r18
 a64:	13 06       	cpc	r1, r19
 a66:	e4 07       	cpc	r30, r20
 a68:	f5 07       	cpc	r31, r21
 a6a:	98 f0       	brcs	.+38     	; 0xa92 <__fp_cmp+0x46>
 a6c:	62 1b       	sub	r22, r18
 a6e:	73 0b       	sbc	r23, r19
 a70:	84 0b       	sbc	r24, r20
 a72:	95 0b       	sbc	r25, r21
 a74:	39 f4       	brne	.+14     	; 0xa84 <__fp_cmp+0x38>
 a76:	0a 26       	eor	r0, r26
 a78:	61 f0       	breq	.+24     	; 0xa92 <__fp_cmp+0x46>
 a7a:	23 2b       	or	r18, r19
 a7c:	24 2b       	or	r18, r20
 a7e:	25 2b       	or	r18, r21
 a80:	21 f4       	brne	.+8      	; 0xa8a <__fp_cmp+0x3e>
 a82:	08 95       	ret
 a84:	0a 26       	eor	r0, r26
 a86:	09 f4       	brne	.+2      	; 0xa8a <__fp_cmp+0x3e>
 a88:	a1 40       	sbci	r26, 0x01	; 1
 a8a:	a6 95       	lsr	r26
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	81 1d       	adc	r24, r1
 a90:	81 1d       	adc	r24, r1
 a92:	08 95       	ret

00000a94 <_exit>:
 a94:	f8 94       	cli

00000a96 <__stop_program>:
 a96:	ff cf       	rjmp	.-2      	; 0xa96 <__stop_program>
